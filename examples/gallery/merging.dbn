// Merging Qwerms -- Golan Levin// Two of a kind, pairwise:// friends on like bearings;// the paradox of individuals// subsuming themselves in union,// however temporarily, to// a single identity.// Click to merge the qwerms.//-------------------------------------------------number sin a// blinn's sine, from the book// expects a in 0...4000{   set b 50   smaller? a 2000   {      smaller? a 1000      {         set t (a/10)         set t2 (t*t)         set t3 (t2*t)         set b (100-134*t2/10000+34*t3/1000000)         set b (b/2+50)      }      notsmaller? a 1000      {         set t ((2000-a)/10)         set t2 (t*t)         set t3 (t2*t)         set b (100-134*t2/10000+34*t3/1000000)         set b (50-b/2)      }   }   notsmaller? a 2000   {      smaller? a 3000      {         set t ((a-2000)/10)         set t2 (t*t)         set t3 (t2*t)         set b (100-134*t2/10000+34*t3/1000000)         set b (50-b/2)      }      notsmaller? a 3000      {         set t ((4000-a)/10)         set t2 (t*t)         set t3 (t2*t)         set b (100-134*t2/10000+34*t3/1000000)         set b (b/2+50)      }   }   value (b-50)}number cos a{   value <sin ((a+3000)%4000)>}//----------------------------------set xscale 23set nPts 100set tp (4000/npts)set aoffset 100repeat n 0 (npts-1){   set <array (aoffset+n)> (<sin ((n*tp)%4000)>*2/xscale)}set th 14set maxlen 64command drawWorm cx cy length phase freq{   // center x   // center y   // length   // phase   pen 70   set i (((phase+0)%nPts)+aoffset)   set xi (cx + <array i>)   set yi (cy - (length/2))   // render qworm body   smaller? length maxlen   {      set len maxlen      set dn 2   }   notsmaller? length maxlen   {      set len length      set dn 4   }   set s (nPts/len*10*freq/100)   repeat n 1 length   {      set r (n*s)      set i (((phase+(r/10))%nPts)+aoffset)      set x1 (cx + (<array i>))      set y1 (yi + n)      line x1 y1 (x1+th) y1      set n (n+2) //dn)   }   // render qworm caps   line   x1      y1     (x1+th)  y1   line  (x1+1)  (y1+3) (x1+13)  (y1+3)   line  (x1+4)  (y1+6) (x1+10)  (y1+6)   line  (xi+1)  (yi-2) (xi+13)  (yi-2)   line  (xi+4)  (yi-5) (xi+10)  (yi-5)   field (x1+6) (y1  ) (x1+8)  (y1+2) 60}set phase0 0set phase1 0set freq1  70set freq0  125set freqd  (freq0 - freq1)set freqdi freqdset cf 100set cx0 65set cy0 51set cx1 21set cy1 51set length 4set wormDistance (cx0-cx1)norefreshpen 90forever{   paper (22 + ((64 - length)/2)) //22   same? <mouse 3> 100   {      set cf (cf+1)      notsmaller? freqd 0      {         set freqd (freqd-2)      }      notsmaller? wormDistance 8 //16      {         set wormDistance (wormDistance-1)      }   }   notsame? <mouse 3> 100   {      notsmaller? cf 100      {         set cf (cf - 3)      }      smaller? freqd freqdi      {         set freqd (freqd+2)      }      smaller? wormDistance 44      {         set wormDistance (wormDistance+1)      }   }   set cx0 (50 + (wormDistance/2)-7)   set cx1 (50 - (wormDistance/2)-7)   set freq0 (cf + (freqd/2))   set freq1 (cf - (freqd/2))   drawWorm cx0 cy0 length phase0 freq0   drawWorm cx1 cy1 length phase1 freq1   set phase0 (phase0+4)   set phase1 (phase1+4)   smaller? length maxlen   {      set length (length+1)   }   refresh}