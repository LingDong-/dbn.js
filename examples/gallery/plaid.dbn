// Plaid Paramecium -- Golan Levin// searching, searching.....//-------------------------------------------------number sin a// blinn's sine, from the book// expects a in 0...4000{   set b 50   smaller? a 2000   {      smaller? a 1000      {         set t (a/10)         set t2 (t*t)         set t3 (t2*t)         set b (100-134*t2/10000+34*t3/1000000)         set b (b/2+50)      }      notsmaller? a 1000      {         set t ((2000-a)/10)         set t2 (t*t)         set t3 (t2*t)         set b (100-134*t2/10000+34*t3/1000000)         set b (50-b/2)      }   }   notsmaller? a 2000   {      smaller? a 3000      {         set t ((a-2000)/10)         set t2 (t*t)         set t3 (t2*t)         set b (100-134*t2/10000+34*t3/1000000)         set b (50-b/2)      }      notsmaller? a 3000      {         set t ((4000-a)/10)         set t2 (t*t)         set t3 (t2*t)         set b (100-134*t2/10000+34*t3/1000000)         set b (b/2+50)      }   }   value (b-50)}number cos a{   value <sin ((a+3000)%4000)>}set cx 50set cy 50paper 50set rx 0set ry 0set rw 40set rh 40set rw4 (4*rw)set rw5 (5*rw)set rwn (0-rw)set rh4 (4*rh)set rh5 (5*rh)set rhn (0-rh)// colorsset <array 21> 10set <array 22> 20set <array 23> 15set <array 24> 20set <array 25> 15// more colorsset <array 31> 4set <array 32> 8set <array 33> 12set <array 34> 8set <array 35> 0// bug coordinatesset nPts 12  // number of body pointsset nTotalPts 17  // includes tailset <array 101> 10set <array 201> 1set <array 102> 14set <array 202> 3set <array 103> 18set <array 203> 9set <array 104> 20set <array 204> 19set <array 105> 18set <array 205> 29set <array 106> 15set <array 206> 34set <array 107> 10set <array 207> 37set <array 108> 5set <array 208> 34set <array 109> 2set <array 209> 29set <array 110> 0set <array 210> 19set <array 111> 2set <array 211> 9set <array 112> 6set <array 212> 3// flagellumset <array 113> 10set <array 213> 36set <array 114> 10set <array 214> 41set <array 115> 10set <array 215> 46set <array 116> 10set <array 216> 51// nucleusset <array 117> 11set <array 217> 10repeat n 1 nTotalPts{   set <array (100+n)> (<array (100+n)> - 10)   set <array (200+n)> (<array (200+n)> - 19)   set <array (300+n)> (<array (100+n)>)   set <array (400+n)> (<array (200+n)>)}command drawBug bx by{   pen 85   set x0 (<array (301)> + bx)   set y0 (<array (401)> + by)   set xi x0   set yi y0   repeat n 2 nPts   {      set x1 (<array (300+n)> + bx)      set y1 (<array (400+n)> + by)      line x0 y0 x1 y1      set x0 x1      set y0 y1   }   line x0 y0 xi yi   // draw flagellum   set x0 (<array (313)> + bx)   set y0 (<array (413)> + by)   repeat n 14 16   {      set x1 (<array (300+n)> + bx)      set y1 (<array (400+n)> + by)      line x0 y0 x1 y1      set x0 x1      set y0 y1   }   // draw nucleus   set nx0 (<array (317)> + bx)   set ny0 (<array (417)> + by)   field nx0 ny0 (nx0+2) (ny0+2) 70}set tailT 0command wiggleFlagellum{   set tailT ((tailT+1)%8)   same? tailT 0   {      set <array 113> 0      set <array 114> (0-1)      set <array 115> (0-2)      set <array 116> (0-2)   }   same? tailT 1   {      set <array 113> 1      set <array 114> 0      set <array 115> (0-1)      set <array 116> (0-3)   }   same? tailT 2   {      set <array 113> 1      set <array 114> 1      set <array 115> 0      set <array 116> (0-2)   }   same? tailT 3   {      set <array 113> 1      set <array 114> 2      set <array 115> 1      set <array 116> 0   }   same? tailT 4   {      set <array 113> 0      set <array 114> 1      set <array 115> 2      set <array 116> 2 //1   }   same? tailT 5   {      set <array 113> (0-1)      set <array 114> 0      set <array 115> 1      set <array 116> 3   }   same? tailT 6   {      set <array 113> (0-1)      set <array 114> (0-1)      set <array 115> 0      set <array 116> 2   }   same? tailT 7   {      set <array 113> (0-1)      set <array 114> (0-2)      set <array 115> (0-1)      set <array 116> 0   }}set cosa 0 // -50....50set sina 0command rotateBug angle{   // copy over freshly wiggled tail data   repeat n 13 16   {      set <array (300+n)> (<array (100+n)>)      set <array (400+n)> (<array (200+n)>)   }   // rotate my bug   set cosa <cos angle>   set sina <sin angle>   repeat n 1 nTotalPts   {      set oldx <array (100+n)>      set oldy <array (200+n)>      set <array (300+n)> (((oldx * cosa) + (oldy * sina))/50)      set <array (400+n)> (((oldy * cosa) - (oldx * sina))/50)   }}// set lefts and bottoms// of background squaresrepeat V 1 5{   set <array V>      ((V-1)* rw)   set <array (V+10)> ((V-1)* rh)}set fade 80// handle the infinite backgroundcommand handleBackground vx vy{   // shift the tiling background by   // vx and vy (small integers)   repeat a 1 5   {      // set across values      set <array a> ((<array a> + vx)%rw5)      smaller? <array a> rwn      {         set RL (<array a>+rw4)      }      notsmaller? <array a> rwn      {         set RL (<array a>-rw)      }      same? a 1      {  // set bottom values just once         set RB <array 11>         set RB (RB + vy)         smaller? RB 0         {            set RB (RB + rh4)         }         repeat b 11 15         {            set <array b> (RB)            set RB ((RB + rh)%rh4)         }      }      repeat c 1 5      {         set RB (<array (c+10)> - rh)         set RR (RL + rw)         set RT (RB + rh)         set RC ((<array (a+20)> + <array (c+30)>) + fade)         field RL RB RR RT RC      }   }}//------------------------------------set bb 198621set mm 98621set seed <time 4>number random range{   set bl (seed*bb+1)   set seed (bl % mm)   value (seed % range)}//--------------------------------set bugAngle (<random 4000>%4000)set bs 100 // bug slowness, scalednorefreshforever{   set slowness (bs/12)   set vx (sina/slowness)   set vy (cosa/slowness)   notsmaller? fade 1   {      set fade (fade - 4)   }   handleBackground vx vy   // update bug parameters   set bs (((9*bs) + (100 + <random 100>))/10)   set bugAngle ((((49*bugAngle) + (<random 4000>))/50)%4000)   // draw bug   wiggleFlagellum   rotateBug bugAngle   drawBug cx cy   refresh}